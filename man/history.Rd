% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/history.R
\name{history}
\alias{history}
\alias{historyUI}
\alias{historyUI_debug}
\alias{historyDemo}
\title{Undo/Redo History Buttons}
\usage{
history(id, value, value_debounce = 500)

historyUI(id, class = NULL, btn_class = "btn btn-default",
  back_text = NULL, back_title = "Undo",
  back_icon = shiny::icon("undo"), fwd_text = NULL,
  fwd_title = "Redo", fwd_icon = shiny::icon("redo"))

historyUI_debug(id)

historyDemo(display.mode = c("showcase", "normal", "auto"))
}
\arguments{
\item{id}{The module id}

\item{value}{The reactive expression with the values should be saved for the
user's history. This expression can contain arbitrary data and be of any
structure as long as it returns a single value (or list). Each change in
this value is stored, so the module may not work well for storing large
data sets.}

\item{value_debounce}{Debounce rate in milliseconds for the \code{value} reactive
expression. To avoid saving spurious changes in \code{value}, the expression is
debounced. See \code{\link[shiny:debounce]{shiny::debounce()}} for more information.}

\item{class}{The class applied to the parent button group container that
holds the undo/redo buttons.}

\item{btn_class}{The classes applied to the buttons. Use a single character
vector to apply the same class to both buttons, or a character vector of
length 2 to apply individual classes to each button, (undo/redo
respectively).}

\item{back_text, fwd_text}{The button text}

\item{back_title, fwd_title}{The button title (shown on hover)}

\item{back_icon, fwd_icon}{The icons used for the buttons}

\item{display.mode}{The mode in which to display the application. If set to
the value \code{"showcase"}, shows application code and metadata from a
\code{DESCRIPTION} file in the application directory alongside the
application. If set to \code{"normal"}, displays the application normally.
Defaults to \code{"auto"}, which displays the application in the mode given
in its \code{DESCRIPTION} file, if any.}
}
\description{
This is a simple Shiny module for undo/redo history. The Shiny module accepts
an arbitrary reactive data value. Changes in the state of this reactive value
are tracked and added to the user's history. The user can then repeatedly
undo and redo to walk through this stack. The module returns the currrent
selected value of the reactive from this historical stack, or \code{NULL} when
the app state was changed by the user. Because this reactive can hold
arbitrary data about the state of the Shiny app, it is up to the app
developer to use the returned current value to update the Shiny apps' inputs
and UI elements.
}
\section{Functions}{
\itemize{
\item \code{historyUI}: Create the UI elements for the undo/redo buttons

\item \code{historyUI_debug}: Debug the saved state. This adds a
\code{\link[shiny:verbatimTextOutput]{shiny::verbatimTextOutput()}} UI element that reports the current history
stacks. \code{.$history} contains the historical states that are accessed when
undoing or walking backward and \code{.$future} contains the (psuedo-)future
states to for redo (or walking forward). \code{.$current} contains the current
value that is reported by the \code{history()} module. Note that this value will
be \code{NULL} when the user is driving the apps state updating.

\item \code{historyDemo}: Example app demonstrating usage of the history module.
}}

\examples{
\dontrun{
library(shiny)
library(shinyThings)

ui <- fluidPage(
  historyUI("hist", back_text = "Step Backward", fwd_text = "Step Forward"),
  textInput("text", "Enter your text here"),
  verbatimTextOutput("v"),
  tags$h4("debug"),
  historyUI_debug("hist")
)

server <- function(input, output, session) {
  update_app_state <- history(
    id = "hist",
    value = reactive({
      req(input$text)
      input$text
    })
  )

  observe({
    req(update_app_state())
    cat("\\nupdate_app_state(): ", update_app_state())
    updateTextInput(session, "text", value = update_app_state())
  })

  output$v <- renderPrint(input$text)
}

shinyApp(ui, server)

}

}
