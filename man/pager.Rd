% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pager.R
\name{pager}
\alias{pager}
\alias{paginationUI}
\alias{pagerUI}
\alias{pagerDemo}
\title{Pagination and Pager Module}
\usage{
pager(id, n_items, page_break = 20)

paginationUI(id, width = 6, ..., offset = 3)

pagerUI(id, label_prev = "Previous", label_next = "Next",
  centered = TRUE, class = NULL)

pagerDemo(display.mode = c("showcase", "normal", "auto"))
}
\arguments{
\item{id}{The shared \code{id} of the \code{pagerUI()} and the \code{pager()} module}

\item{n_items}{The number of items in the collection of items to be paged}

\item{page_break}{The maximum number of items in each page}

\item{width}{The width of the containing column}

\item{...}{Additional elements included in the containg column, added before
the pagniation buttons}

\item{offset}{The offest of the containing column}

\item{label_prev}{The label of the "Previous" button.}

\item{label_next}{The label of the "Next" button".}

\item{centered}{If \code{TRUE}, the buttons are centered together, otherwise they
are separated and spread to the left and right edges of their container.}

\item{class}{Additional classes applied to the \code{<nav>} container.}

\item{display.mode}{The mode in which to display the application. If set to
the value \code{"showcase"}, shows application code and metadata from a
\code{DESCRIPTION} file in the application directory alongside the
application. If set to \code{"normal"}, displays the application normally.
Defaults to \code{"auto"}, which displays the application in the mode given
in its \code{DESCRIPTION} file, if any.}
}
\description{
A pager module to add pagination to any collection of items. Given a
number of items and a page break, the pagination module returns the
indexes of the items on the currently selected page.
}
\section{Functions}{
\itemize{
\item \code{paginationUI}: The user interface for the pager module. The pager is
contained in a single column in a \code{fluidRow()}.

\item \code{pagerUI}: Next/previous buttons that can be used in addition to,
or in place of \code{\link[=paginationUI]{paginationUI()}}.

\item \code{pagerDemo}: Example app demonstrating usage of the pager module.
}}

\examples{
if (interactive()) {
library(shiny)

ui <- fluidPage(
  titlePanel("shinyThings Pagination"),
  sidebarLayout(
    sidebarPanel(
      width = 6,

      tags$h4("paginationUI()"),
      shinyThings::paginationUI("pager", width = 12, offset = 0, class = "text-center"),
      tags$hr(),

      sliderInput("page_break", "Page Size", min = 1, max = 6, step = 1, value = 3),
      helpText(tags$code("page_break")),
      tags$hr(),

      tags$h4("pagerUI()"),
      shinyThings::pagerUI("pager", centered = FALSE)
    ),
    mainPanel(
      width = 6,

      tags$p("Page indices:"),
      verbatimTextOutput("page_indices"),

      tags$p(HTML("Paged output (<code>letters</code>):")),
      uiOutput("paged_output")
    )
  )
)

server <- function(input, output) {
  ## page_break and n_items can be reactive or fixed values
  # page_break <- 4
  # n_items <- length(letters)
  n_items <- reactiveVal(length(letters))
  page_break <- reactive({input$page_break})

  page_indices <- shinyThings::pager("pager", n_items, page_break)

  output$page_indices <- renderPrint({
    page_indices()
  })

  output$paged_output <- renderUI({
    tags$ul(
      lapply(letters[page_indices()], tags$li)
    )
  })
}

shinyApp(ui, server)
}

}
\references{
\url{https://getbootstrap.com/docs/3.3/components/#pagination}
}
